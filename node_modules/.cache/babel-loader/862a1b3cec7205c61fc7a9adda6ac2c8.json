{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport react from 'react';\nimport { useEffect, useState } from 'react';\nimport { useParams, Link } from 'react-router-dom';\nimport axios from 'axios';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction EditPost() {\n  _s();\n\n  const {\n    postid\n  } = useParams();\n  const url = `http://localhost:8000/api/posts/${postid}`;\n  const [post, setPost] = useState(null);\n  const [newPost, setnewPost] = useState({\n    title: '',\n    content: '',\n    status: ''\n  });\n\n  function componentDidMount() {\n    axios.get(url).then(res => {\n      const data = res.data;\n      setPost(data);\n    });\n  }\n\n  const updatePost = async (data, id) => {\n    await fetch(url, {\n      method: 'put',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(data)\n    });\n  };\n\n  useEffect(() => componentDidMount(), []);\n  const [networkErrMsg, setNetworkErrMsg] = useState(null);\n  const [clientErrMsg, setClientErrMsg] = useState(null);\n\n  const statusCodeToErr = responseObj => {\n    setNetworkErrMsg(`Network Error of code: ${responseObj.status}`); // TODO - console log the err message\n  };\n\n  const clientFormValidation = newPost => {\n    const blankFields = Object.entries(newPost).filter(kv => kv[1] === '');\n\n    if (blankFields.length > 0) {\n      setClientErrMsg(`${blankFields[0][0]} can not be blank`);\n      return false;\n    }\n\n    setClientErrMsg(null);\n    return true;\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    console.log(`fetching with token ${token}`);\n    setNetworkErrMsg(null);\n\n    if (!clientFormValidation(newPost)) {\n      return;\n    }\n\n    fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': ` JWT ${token}`\n      },\n      body: JSON.stringify(newPost)\n    }).then(res => {\n      if (res.ok) {\n        return res.json();\n      } else {\n        statusCodeToErr(res);\n        return Promise.resolve(null);\n      }\n    }).then(data => {\n      if (!data) {\n        console.log(`problem with network request: ${networkErrMsg}`);\n      } else {\n        console.log(data); // call to refresh the list\n        // set RefreshCounter(refreshCounter + 1)\n      }\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: post.title\n  }, void 0, false);\n}\n\n_s(EditPost, \"4bGl1y8+n/gUk6E1/DrvImX8vzo=\", false, function () {\n  return [useParams];\n});\n\n_c = EditPost;\nexport default EditPost;\n\nvar _c;\n\n$RefreshReg$(_c, \"EditPost\");","map":{"version":3,"names":["react","useEffect","useState","useParams","Link","axios","EditPost","postid","url","post","setPost","newPost","setnewPost","title","content","status","componentDidMount","get","then","res","data","updatePost","id","fetch","method","headers","body","JSON","stringify","networkErrMsg","setNetworkErrMsg","clientErrMsg","setClientErrMsg","statusCodeToErr","responseObj","clientFormValidation","blankFields","Object","entries","filter","kv","length","handleSubmit","e","preventDefault","console","log","token","ok","json","Promise","resolve"],"sources":["/Users/charlescorio/Desktop/sei/projects/p4/frontend/src/components/PostEdit.js"],"sourcesContent":["import react from 'react'\nimport { useEffect, useState } from 'react'\nimport { useParams, Link } from 'react-router-dom'\nimport axios from 'axios'\nfunction EditPost() {\n    const {postid} = useParams()\n    const url = `http://localhost:8000/api/posts/${postid}`\n    const [post, setPost] = useState(null)\n    const [newPost, setnewPost] = useState({\n        title: '',\n        content: '',\n        status: ''\n    })\n\n    function componentDidMount() {\n        axios.get(url)\n            .then(res => {\n                const data = res.data\n                setPost(data)\n            })\n    }\n    const updatePost = async (data, id) => {\n        await fetch(url, {\n            method: 'put',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(data)\n        })\n    }\n\n    useEffect(() =>\n        componentDidMount(), [])\n\n\n\n    const [networkErrMsg, setNetworkErrMsg] = useState(null)\n\n    const [clientErrMsg, setClientErrMsg] = useState(null)\n\n    const statusCodeToErr = (responseObj) => {\n        setNetworkErrMsg(`Network Error of code: ${responseObj.status}`)\n        // TODO - console log the err message\n    }\n    const clientFormValidation = (newPost) => {\n        const blankFields = Object.entries(newPost)\n            .filter(kv => kv[1] === '')\n        if (blankFields.length > 0) {\n            setClientErrMsg(`${blankFields[0][0]} can not be blank`)\n            return false\n        }\n        setClientErrMsg(null)\n        return true\n    }\n    const handleSubmit = (e) => {\n        e.preventDefault()\n        console.log(`fetching with token ${token}`)\n        setNetworkErrMsg(null)\n        if (!clientFormValidation(newPost)) {\n            return\n        }\n        fetch(url,\n            {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': ` JWT ${token}`\n                },\n                body: JSON.stringify(newPost)\n            }\n        )\n            .then(res => {\n                if (res.ok) {\n                    return res.json()\n                } else {\n                    statusCodeToErr(res)\n                    return Promise.resolve(null)\n                }\n            })\n            .then(data => {\n                if (!data) {\n                    console.log(`problem with network request: ${networkErrMsg}`)\n                } else {\n\n                    console.log(data)\n\n                    // call to refresh the list\n                    // set RefreshCounter(refreshCounter + 1)\n                }\n            })\n    }\n\n\n\n\n\n\n\n    return (\n        <>\n        {post.title}\n        </>\n    )\n}\n\n\nexport default EditPost"],"mappings":"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"},"metadata":{},"sourceType":"module"}