{"ast":null,"code":"var _jsxFileName = \"/Users/charlescorio/Desktop/sei/projects/p4/frontend/src/components/NewAlbum.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction NewAlbum() {\n  _s();\n\n  const url = 'http://localhost:8000/api/albums/';\n  const artistid = useParams();\n  console.log(artistid.value);\n  const [album, setAlbum] = useState({\n    name: '',\n    artist: Number(artistid),\n    image_url: ''\n  });\n  let navigate = useNavigate();\n  let token = localStorage.getItem('access_token');\n\n  const handleChange = event => {\n    setAlbum({ ...album,\n      [event.target.id]: event.target.value\n    });\n    console.log(album);\n  };\n\n  const [networkErrMsg, setNetworkErrMsg] = useState(null);\n\n  const statusCodeToErr = responseObj => {\n    setNetworkErrMsg(`Network Error of code: ${responseObj.status}`); // TODO - console log the err message\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    console.log(`fetching with token ${token}`);\n    setNetworkErrMsg(null);\n    fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': ` JWT ${token}`\n      },\n      body: JSON.stringify(album)\n    }).then(res => {\n      if (res.ok) {\n        return res.json();\n      } else {\n        statusCodeToErr(res);\n        return Promise.resolve(null);\n      }\n    }).then(data => {\n      if (!data) {\n        console.log(`problem with network request: ${networkErrMsg}`);\n      } else {\n        console.log(data); // call to refresh the list\n        // set RefreshCounter(refreshCounter + 1)\n      }\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"name\",\n        onChange: handleChange,\n        value: album.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 91\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\",\n        className: \"btn btn-danger\",\n        value: \"hello\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n\n_s(NewAlbum, \"pNPvXkZLSztF75hKYAofjc0qMb8=\", false, function () {\n  return [useParams, useNavigate];\n});\n\n_c = NewAlbum;\nexport default NewAlbum;\n\nvar _c;\n\n$RefreshReg$(_c, \"NewAlbum\");","map":{"version":3,"names":["React","useState","useParams","useNavigate","NewAlbum","url","artistid","console","log","value","album","setAlbum","name","artist","Number","image_url","navigate","token","localStorage","getItem","handleChange","event","target","id","networkErrMsg","setNetworkErrMsg","statusCodeToErr","responseObj","status","handleSubmit","e","preventDefault","fetch","method","headers","body","JSON","stringify","then","res","ok","json","Promise","resolve","data"],"sources":["/Users/charlescorio/Desktop/sei/projects/p4/frontend/src/components/NewAlbum.js"],"sourcesContent":["import React, { useState } from 'react'\nimport { useParams, useNavigate } from 'react-router-dom'\n\nfunction NewAlbum() {\n    const url = 'http://localhost:8000/api/albums/'\n    const artistid = useParams()\n    console.log(artistid.value)\n    const [album, setAlbum] = useState({\n        name: '',\n        artist: Number(artistid),\n        image_url: ''\n        \n    })\n    let navigate = useNavigate()\n    let token = localStorage.getItem('access_token')\n    const handleChange = (event) => {\n        setAlbum({ ...album, [event.target.id]: event.target.value })\n        console.log(album)\n    }\n\n\n\n    const [networkErrMsg, setNetworkErrMsg] = useState(null)\n\n    const statusCodeToErr = (responseObj) => {\n        setNetworkErrMsg(`Network Error of code: ${responseObj.status}`)\n        // TODO - console log the err message\n    }\n    const handleSubmit = (e) => {\n        e.preventDefault()\n        console.log(`fetching with token ${token}`)\n        setNetworkErrMsg(null)\n        fetch(url,\n            {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': ` JWT ${token}`\n                },\n                body: JSON.stringify(album)\n            }\n        )\n            .then(res => {\n                if (res.ok) {\n                    return res.json()\n                } else {\n                    statusCodeToErr(res)\n                    return Promise.resolve(null)\n\n                }\n            })\n            .then(data => {\n                if (!data) {\n                    console.log(`problem with network request: ${networkErrMsg}`)\n                } else {\n\n                    console.log(data)\n\n                    // call to refresh the list\n                    // set RefreshCounter(refreshCounter + 1)\n                }\n            })\n    }\n\n    return (\n        <>\n            <form onSubmit={handleSubmit}>\n                <label htmlFor=\"name\">name</label>\n                <input type=\"text\" id=\"name\" onChange={handleChange} value={album.name} /><br></br>\n\n                <input type=\"submit\" className=\"btn btn-danger\" value=\"hello\" />\n            </form>\n        </>\n    )\n}\n\nexport default NewAlbum"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,SAAT,EAAoBC,WAApB,QAAuC,kBAAvC;;;;AAEA,SAASC,QAAT,GAAoB;EAAA;;EAChB,MAAMC,GAAG,GAAG,mCAAZ;EACA,MAAMC,QAAQ,GAAGJ,SAAS,EAA1B;EACAK,OAAO,CAACC,GAAR,CAAYF,QAAQ,CAACG,KAArB;EACA,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAAC;IAC/BW,IAAI,EAAE,EADyB;IAE/BC,MAAM,EAAEC,MAAM,CAACR,QAAD,CAFiB;IAG/BS,SAAS,EAAE;EAHoB,CAAD,CAAlC;EAMA,IAAIC,QAAQ,GAAGb,WAAW,EAA1B;EACA,IAAIc,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,cAArB,CAAZ;;EACA,MAAMC,YAAY,GAAIC,KAAD,IAAW;IAC5BV,QAAQ,CAAC,EAAE,GAAGD,KAAL;MAAY,CAACW,KAAK,CAACC,MAAN,CAAaC,EAAd,GAAmBF,KAAK,CAACC,MAAN,CAAab;IAA5C,CAAD,CAAR;IACAF,OAAO,CAACC,GAAR,CAAYE,KAAZ;EACH,CAHD;;EAOA,MAAM,CAACc,aAAD,EAAgBC,gBAAhB,IAAoCxB,QAAQ,CAAC,IAAD,CAAlD;;EAEA,MAAMyB,eAAe,GAAIC,WAAD,IAAiB;IACrCF,gBAAgB,CAAE,0BAAyBE,WAAW,CAACC,MAAO,EAA9C,CAAhB,CADqC,CAErC;EACH,CAHD;;EAIA,MAAMC,YAAY,GAAIC,CAAD,IAAO;IACxBA,CAAC,CAACC,cAAF;IACAxB,OAAO,CAACC,GAAR,CAAa,uBAAsBS,KAAM,EAAzC;IACAQ,gBAAgB,CAAC,IAAD,CAAhB;IACAO,KAAK,CAAC3B,GAAD,EACD;MACI4B,MAAM,EAAE,MADZ;MAEIC,OAAO,EAAE;QACL,gBAAgB,kBADX;QAEL,iBAAkB,QAAOjB,KAAM;MAF1B,CAFb;MAMIkB,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe3B,KAAf;IANV,CADC,CAAL,CAUK4B,IAVL,CAUUC,GAAG,IAAI;MACT,IAAIA,GAAG,CAACC,EAAR,EAAY;QACR,OAAOD,GAAG,CAACE,IAAJ,EAAP;MACH,CAFD,MAEO;QACHf,eAAe,CAACa,GAAD,CAAf;QACA,OAAOG,OAAO,CAACC,OAAR,CAAgB,IAAhB,CAAP;MAEH;IACJ,CAlBL,EAmBKL,IAnBL,CAmBUM,IAAI,IAAI;MACV,IAAI,CAACA,IAAL,EAAW;QACPrC,OAAO,CAACC,GAAR,CAAa,iCAAgCgB,aAAc,EAA3D;MACH,CAFD,MAEO;QAEHjB,OAAO,CAACC,GAAR,CAAYoC,IAAZ,EAFG,CAIH;QACA;MACH;IACJ,CA7BL;EA8BH,CAlCD;;EAoCA,oBACI;IAAA,uBACI;MAAM,QAAQ,EAAEf,YAAhB;MAAA,wBACI;QAAO,OAAO,EAAC,MAAf;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QADJ,eAEI;QAAO,IAAI,EAAC,MAAZ;QAAmB,EAAE,EAAC,MAAtB;QAA6B,QAAQ,EAAET,YAAvC;QAAqD,KAAK,EAAEV,KAAK,CAACE;MAAlE;QAAA;QAAA;QAAA;MAAA,QAFJ,eAE8E;QAAA;QAAA;QAAA;MAAA,QAF9E,eAII;QAAO,IAAI,EAAC,QAAZ;QAAqB,SAAS,EAAC,gBAA/B;QAAgD,KAAK,EAAC;MAAtD;QAAA;QAAA;QAAA;MAAA,QAJJ;IAAA;MAAA;MAAA;MAAA;IAAA;EADJ,iBADJ;AAUH;;GAvEQR,Q;UAEYF,S,EAQFC,W;;;KAVVC,Q;AAyET,eAAeA,QAAf"},"metadata":{},"sourceType":"module"}